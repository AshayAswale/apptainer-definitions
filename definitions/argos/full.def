Bootstrap: docker
From: ubuntu:20.04

# ===================================
# === Manually configurable setup ===
%post

  # REPO SOURCE ORGS

  # use "ilpincy" or other
  ARGOS_REPO="ilpincy"
  ARGOS_EXAMPLES_REPO="ilpincy"
  KHEPERAIV_REPO="ilpincy"
  KILOBOT_REPO="ilpincy"
  # use "NESTLab" or "buzz-lang" or other
  BUZZ_REPO="dcat52"

  # GIT HASHES

  # use "latest" for most recent commit
  ARGOS_HASH="latest"
  ARGOS_EXAMPLES_HASH="latest"
  BUZZ_HASH="latest"
  KHEPERAIV_HASH="latest"
  KILOBOT_HASH="latest"

  # BUILD TYPE
  
  # use "Debug" or "Release"
  BUILD_TYPE="Debug"

  # use "OFF" or "ON" when BUILD_TYPE is set to "Release"
  BUILD_NATIVE="OFF"

  # use "OFF" or "ON"
  ARGOS_INSTALL_LDSOCONF="ON"

  # defaults to "/usr/local"
  INSTALL_PREFIX="/usr/local"

# ===================================
# ===================================

%labels
  AUTHOR dscatherman@wpi.edu
  VERSION v0.5
  NAME argos_full

%help
  This container installs ARGoS3, ARGoS3-Examples, Buzz, and KheperaIV.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%environment
  export PATH=$PATH:/user-packages/bin/
  export LD_LIBRARY_PATH:$LD_LIBRARY_PATH:/user-packages/lib
  export INSTALL_PREFIX="/user-packages"
  # Do Nothing

# %test
#   argos3 -q all

%runscript
  cmd=$(basename "$0")
  arg="$@"
  $cmd $arg

# === Setup general requirements ===
%post

  PACKAGES=/user-packages
  # give user rwx permissions over created files/dirs. Change to 002 for r-x.
  umask 000

  mkdir $PACKAGES
  cd $PACKAGES
  
  export DEBIAN_FRONTEND=noninteractive

  apt-get -y update
  apt-get -y install git

# === Install additional tools that are small and useful ===
%post

  apt-get install -q -y bc

# === Install ARGoS3 ===
%post

  # pre-reqs
  apt-get install -q -y cmake libfreeimage-dev libfreeimageplus-dev \
    qt5-default freeglut3-dev libxi-dev libxmu-dev liblua5.3-dev \
    lua5.3 doxygen graphviz libgraphviz-dev asciidoc build-essential

  # optional pre-reqs
  apt-get install -q -y libga-dev

  # install argos3
  cd $PACKAGES
  git clone https://github.com/${ARGOS_REPO}/argos3.git argos3
  cd argos3
  
  if [ "$ARGOS_HASH" = "latest" ]; then
    ARGOS_HASH=`git rev-parse --short HEAD`
  else
    git checkout $ARGOS_HASH
  fi

  mkdir build_simulator
  cd build_simulator

  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DARGOS_DOCUMENTATION=ON \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DARGOS_DOCUMENTATION=OFF \
      -DARGOS_INSTALL_LDSOCONF=$ARGOS_INSTALL_LDSOCONF \
      -DARGOS_BUILD_NATIVE=$BUILD_NATIVE \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  fi

  make -j $NUM_BUILD_THREADS
  if [ "$BUILD_TYPE" = "Debug" ]; then
    make doc
  fi
  make install
  ldconfig

# === Install ARGoS3-examples ===
%post

  cd $PACKAGES
  git clone https://github.com/${ARGOS_EXAMPLES_REPO}/argos3-examples.git
  cd argos3-examples  
  if [ "$ARGOS_EXAMPLES_HASH" = "latest" ]; then
      ARGOS_EXAMPLES_HASH=`git rev-parse --short HEAD`
  else
      git checkout $ARGOS_EXAMPLES_HASH
  fi  
  mkdir build
  cd build
  if [ "$BUILD_TYPE" = "Debug" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
        ..
  elif [ "$BUILD_TYPE" = "Release" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Release  \
        -DARGOS_FORCE_NO_QTOPENGL=ON \
        -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
        ..
  fi
  make -j $NUM_BUILD_THREADS

# === Install Buzz ===
%post

  cd $PACKAGES
  git clone https://github.com/${BUZZ_REPO}/Buzz.git buzz
  cd buzz

  if [ "$BUZZ_HASH" = "latest" ]; then
    BUZZ_HASH=`git rev-parse --short HEAD`
  else
    git checkout $BUZZ_HASH
  fi

  mkdir build
  cd build

  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release  \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  fi

  make -j $NUM_BUILD_THREADS
  make install
  ldconfig

# === Install argos3-kheperaiv ===
%post

  cd $PACKAGES
  git clone https://github.com/${KHEPERAIV_REPO}/argos3-kheperaiv.git
  cd argos3-kheperaiv

  if [ "$KHEPERAIV_HASH" = "latest" ]; then
    KHEPERAIV_HASH=`git rev-parse --short HEAD`
  else
    git checkout $KHEPERAIV_HASH
  fi

  mkdir build_sim
  cd build_sim

  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release  \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  fi

  make -j $NUM_BUILD_THREADS
  make install
  ldconfig

# === Install argos3-kilobot ===
%post

  cd $PACKAGES
  git clone https://github.com/${KILOBOT_REPO}/argos3-kilobot.git
  cd argos3-kilobot

  if [ "$KILOBOT_HASH" = "latest" ]; then
    KILOBOT_HASH=`git rev-parse --short HEAD`
  else
    git checkout $KILOBOT_HASH
  fi

  mkdir build
  cd build

  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release  \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \
      ../src
  fi

  make -j $NUM_BUILD_THREADS
  make install
  ldconfig

# === Cleanup setup ===
%post
  
  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
   # TODO(@dcat52): if release build, empty image cache
   # empty the cache to reduce image size
   # apt-get clean

  # add created on info to label
  DT=`date`
  echo "CREATED_ON $DT" >> "$APPTAINER_LABELS"

  # store packages directory for future use
  echo "export PACKAGES=$PACKAGES" >> $APPTAINER_ENVIRONMENT
  # store build type for future use
  echo "export BUILD_TYPE=$BUILD_TYPE" >> $APPTAINER_ENVIRONMENT

  # store the build type into a label
  echo "_BUILD_TYPE $BUILD_TYPE" >>  "$APPTAINER_LABELS"
  # store whether build native into a label
  echo "BUILD_NATIVE $BUILD_NATIVE" >>  "$APPTAINER_LABELS"

  # store what argos3 repo was used
  echo "_ARGOS_REPO $ARGOS_REPO" >> "$APPTAINER_LABELS"
  echo "_ARGOS_EXAMPLES_REPO $ARGOS_EXAMPLES_REPO" >> "$APPTAINER_LABELS"
  # store the git hashes into labels
  echo "_HASH_ARGOS $ARGOS_HASH" >> "$APPTAINER_LABELS"
  echo "_HASH_ARGOS_EXAMPLES $ARGOS_EXAMPLES_HASH" >> "$APPTAINER_LABELS"