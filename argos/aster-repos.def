Bootstrap: localimage
From: aster-base.sif

# ===================================
# === Manually configurable setup ===
%arguments

  VERSION=v0.12

  DOCKER_BASE=ubuntu:20.04

  NUM_BUILD_THREADS=20

  # GIT HASHES
  # use "latest" for most recent commit
  HASH_ARGOS=latest
  HASH_BUZZ=latest
  HASH_CAFCPP=latest
  HASH_LEO=feature/robot-compilation
  HASH_MRTA=latest

  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  BUILD_LUA=OFF
  BUILD_NATIVE=OFF
  FORCE_NO_QT=OFF
  ARGOS_INSTALL_LDSOCONF=ON

  WORKING_DIR=

  # defaults to "/usr/local/"
  INSTALL_PREFIX=/usr/local/
  #"/packages/local/"

# ===================================
# ===================================

%environment
  export PATH={{INSTALL_PREFIX}}/bin/:$PATH
  export LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  export INSTALL_PREFIX={{INSTALL_PREFIX}}
  export CMAKE_INCLUDE_PATH={{INSTALL_PREFIX}}
  export BUILD_TYPE={{BUILD_TYPE}}
  export WORKING_DIR={{WORKING_DIR}}

%setup
  umask 000
  mkdir -p ${APPTAINER_ROOTFS}/{{WORKING_DIR}}

%post -c /bin/bash
  . /.singularity.d/env/90-bashrc.sh
  . /opt/ros/noetic/setup.sh

  export LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  export DEBIAN_FRONTEND=noninteractive
  
  umask 000

  WORKING_DIR={{WORKING_DIR}}
  cd $WORKING_DIR

  BUILD_TARGET="simulator"

  while getopts "t:" opt; do
    case $opt in
      t)
        BUILD_TARGET=$OPTARG
        ;;
      *)
        echo "Usage $0 [-t target]"
        exit 1
        ;;
    esac
  done


  echo Building for target "$BUILD_TARGET"


  cd $WORKING_DIR
  cd argos3
  [ -d "build_simulator" ] && rm -rf build_simulator
  mkdir build_simulator
  cd build_simulator
  cmake \
        -DCMAKE_CXX_FLAGS="-O0 -DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
        -DCMAKE_BUILD_TYPE=Debug \
        -DARGOS_DOCUMENTATION=OFF \
        -DARGOS_BUILD_FOR=${BUILD_TARGET} \
        ../src
  make
  sudo make install
  sudo ldconfig

  cd $WORKING_DIR
  # <clone Buzz repository>
  if [ "$BUILD_TARGET" == "simulator" ]; then
    cd Buzz
    [ -d "build" ] && rm -rf build
    mkdir build
    cd build
    cmake \
            -DCMAKE_CXX_FLAGS="-O0 -DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
            -DCMAKE_BUILD_TYPE=Debug \
            ../src
    make
    sudo make install
    sudo ldconfig
  fi
  
  cd $WORKING_DIR
  # <clone caf-cpp repository>
  cd caf-cpp
  [ -d "build" ] && rm -rf build
  mkdir build
  cd build
  cmake \
      -DCMAKE_CXX_FLAGS="-O0 -DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
      -DCMAKE_BUILD_TYPE=Debug \
      ..
  make
  sudo make install
  sudo ldconfig
  
  cd $WORKING_DIR
  # <clone argos3-leo repository>
  cd argos3-leo
  [ -d "build_sim" ] && rm -rf build_sim
  mkdir build_sim
  cd build_sim
  cmake \
      -DCMAKE_CXX_FLAGS="-O0 -DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
      -DCMAKE_BUILD_TYPE=Debug \
      -DARGOS_BUILD_FOR=${BUILD_TARGET} \
      ../src
  make
  sudo make install
  sudo ldconfig
  
  cd $WORKING_DIR
  # <clone MultiRobotTaskAllocation repository>
  cd MultiRobotTaskAllocation
  [ -d "build" ] && rm -rf build
  mkdir build
  cd build
  cmake \
      -DCMAKE_CXX_FLAGS="-O0 -DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
      -DCMAKE_BUILD_TYPE=Debug \
      ..
  make
  sudo make install
  sudo ldconfig
  
  cd $WORKING_DIR

  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  # apt clean

  # add created on info to label
  DT=`date`
  echo CREATED_ON $DT >> "$APPTAINER_LABELS"
