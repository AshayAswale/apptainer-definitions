Bootstrap: docker
From: {{DOCKER_BASE}}

# ===================================
# === Manually configurable setup ===
%arguments

  VERSION=v0.11

  DOCKER_BASE=dcat52/argos-requirements:20.04-minimum

  NUM_BUILD_THREADS=20

  # BUILD & INSTALL REPO
  _ARGOS=y
  _ARGOS_EXAMPLES=n
  _BUZZ=y
  _KHEPERAIV=y
  _WEBVIZ=n
  _VICON=y
  
  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  BUILD_LUA=OFF
  BUILD_NATIVE=OFF
  FORCE_NO_QT=OFF
  ARGOS_INSTALL_LDSOCONF=ON

  WORKING_DIR=

  # defaults to "/usr/local"
  INSTALL_PREFIX=/usr/local
  #"/packages/local"

# ===================================
# ===================================

%labels
  AUTHOR daviscatherman@gmail.com
  VERSION {{VERSION}}
  NAME argos

%help
  This container installs ARGoS3, ARGoS3-Examples, Buzz, and KheperaIV.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%setup
  mkdir -p ${APPTAINER_ROOTFS}/{{WORKING_DIR}}

%environment
  export PATH={{INSTALL_PREFIX}}/bin/:$PATH
  export LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  export INSTALL_PREFIX={{INSTALL_PREFIX}}
  export CMAKE_INCLUDE_PATH={{INSTALL_PREFIX}}
  export BUILD_TYPE={{BUILD_TYPE}}
  export WORKING_DIR={{WORKING_DIR}}

%runscript
  /bin/bash -rcfile /.singularity.d/env/90-bashrc.sh

  . /.singularity.d/env/90-bashrc.sh
  . /.singularity.d/env/90-helper.sh
  argos3 -q all

%setup
  . definitions/include/helper.sh
  add_bashrc
  add_helper

%post -c /bin/bash
  . /.singularity.d/env/90-bashrc.sh
  . /.singularity.d/env/90-helper.sh

  LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  
  # umask 000
  WORKING_DIR={{WORKING_DIR}}
  
  export DEBIAN_FRONTEND=noninteractive

  apt update -y
  apt install -qy git bc gdb tree

  if dfx_string_not_contains {{DOCKER_BASE}} dcat52; then
    # pre-reqs only need installed if not preinstalled n the container
    apt install -qy cmake libfreeimage-dev libfreeimageplus-dev \
      freeglut3-dev libxi-dev libxmu-dev build-essential
  fi

  # this pre-req will require python
  apt install -qy qt5-default python3-pip

  apt install -qy zlib1g-dev libssl-dev

  if [ "{{BUILD_LUA}}" = "ON" ]; then
    apt install -qy liblua5.3-dev lua5.3
  fi

  if [ "{{BUILD_DOC}}" = "ON" ]; then
    apt install -qy doxygen asciidoc graphviz libgraphviz-dev
  fi

  cd $WORKING_DIR

  cmake_args="
              -DCMAKE_BUILD_TYPE={{BUILD_TYPE}} 
              -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}} 
              -DARGOS_DOCUMENTATION={{BUILD_DOC}} 
              -DARGOS_BUILD_NATIVE={{BUILD_NATIVE}} 
              -DARGOS_INSTALL_LDSOCONF={{ARGOS_INSTALL_LDSOCONF}} 
              -DARGOS_FORCE_NO_QTOPENGL={{FORCE_NO_QT}}
              "
  dfx_make_build \
    build={{_ARGOS}} \
    folder=argos3 \
    dir=build_simulator \
    src=src

  cd $WORKING_DIR

  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    build={{_ARGOS_EXAMPLES}} \
    folder=argos3-examples \
    dir=build \
    src=src

  cd $WORKING_DIR

  cmake_args="
              -DCMAKE_BUILD_TYPE={{BUILD_TYPE}} 
              -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}} 
              -DARGOS_FORCE_NO_QTOPENGL={{FORCE_NO_QT}} 
              "
  dfx_make_build \
    build={{_BUZZ}} \
    folder=buzz \
    dir=build \
    src=src

  cd $WORKING_DIR

  dfx_make_build \
    build={{_KHEPERAIV}} \
    folder=argos3-kheperaiv \
    dir=build \
    src=src

  cd $WORKING_DIR

  dfx_make_build \
    build={{_WEBVIZ}} \
    folder=argos3-webviz \
    dir=build \
    src=src

  cd $WORKING_DIR

  cmake_args="
              -DCMAKE_BUILD_TYPE={{BUILD_TYPE}}
              -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}
              -DARGOS_FORCE_NO_QTOPENGL={{FORCE_NO_QT}}
              "
  dfx_make_build \
    build={{_VICON}} \
    folder=vicon \
    dir=build \
    src=
  
  # remove a section of libQt5 to work on Turing
  # strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  # apt clean

  # add created on info to label
  DT=`date`
  echo CREATED_ON $DT >> "$APPTAINER_LABELS"

  # store the build type into a label
  echo _BUILD_TYPE {{BUILD_TYPE}} >>  "$APPTAINER_LABELS"
  # store whether build native into a label
  echo _BUILD_NATIVE {{BUILD_NATIVE}} >>  "$APPTAINER_LABELS"
  # store whether build doc into a label
  echo _BUILD_DOC {{BUILD_DOC}} >>  "$APPTAINER_LABELS"
