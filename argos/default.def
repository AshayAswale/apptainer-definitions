Bootstrap: docker
From: {{DOCKER_BASE}}

# ===================================
# === Manually configurable setup ===
%arguments

  VERSION=v0.11

  DOCKER_BASE=dcat52/argos-requirements:20.04-minimum

  NUM_BUILD_THREADS=20

  # REPO SOURCE ORGS
  # commonly "ilpincy" or "NESTLab" or "buzz-lang"
  ORG_ARGOS=ilpincy
  ORG_ARGOS_EXAMPLES=NA
  ORG_BUZZ=NESTLab
  ORG_KHEPERAIV=ilpincy
  ORG_WEBVIZ=NA
  ORG_VICON=NA

  # GIT HASHES
  # use "latest" for most recent commit
  HASH_ARGOS=latest
  HASH_ARGOS_EXAMPLES=latest
  HASH_BUZZ=latest
  HASH_KHEPERAIV=latest
  HASH_WEBVIZ=feature/update-cmake
  HASH_VICON=latest
  
  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  BUILD_LUA=OFF
  BUILD_NATIVE=OFF
  FORCE_NO_QT=OFF
  ARGOS_INSTALL_LDSOCONF=ON

  PACKAGES=/packages

  # defaults to "/usr/local"
  INSTALL_PREFIX=/usr/local
  #"/packages/local"

# ===================================
# ===================================

%labels
  AUTHOR daviscatherman@gmail.com
  VERSION {{VERSION}}
  NAME argos

%help
  This container installs ARGoS3, ARGoS3-Examples, Buzz, and KheperaIV.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%environment
  export PATH={{INSTALL_PREFIX}}/bin/:$PATH
  export LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  export INSTALL_PREFIX={{INSTALL_PREFIX}}
  export CMAKE_INCLUDE_PATH={{INSTALL_PREFIX}}
  export BUILD_TYPE={{BUILD_TYPE}}
  export PACKAGES={{PACKAGES}}

%test
  argos3 -q all

%setup
  mkdir -p ${APPTAINER_ROOTFS}/{{PACKAGES}}
  . definitions/include/helper.sh
  add_helper
  add_bashrc
  add_sshauthsock

%post -c /bin/bash
  . /.singularity.d/env/90-bashrc.sh

  LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  
  umask 000

  PACKAGES={{PACKAGES}}

  mkdir -p $PACKAGES
  cd $PACKAGES
  
  export DEBIAN_FRONTEND=noninteractive

  apt update -y
  apt install -qy git bc gdb tree

  if dfx_string_not_contains {{DOCKER_BASE}} dcat52; then
    # pre-reqs only need installed if not preinstalled n the container
    apt install -qy cmake libfreeimage-dev libfreeimageplus-dev \
      freeglut3-dev libxi-dev libxmu-dev build-essential
  fi

  # this pre-req will require python
  apt install -qy qt5-default python3-pip

  apt install -qy zlib1g-dev libssl-dev

  if [ "{{BUILD_LUA}}" = "ON" ]; then
    apt install -qy liblua5.3-dev lua5.3
  fi

  if [ "{{BUILD_DOC}}" = "ON" ]; then
    apt install -qy doxygen asciidoc graphviz libgraphviz-dev
  fi

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_ARGOS}} repo=argos3 hash={{HASH_ARGOS}}
  export cmake_args="
              -DCMAKE_BUILD_TYPE={{BUILD_TYPE}} 
              -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}} 
              -DARGOS_DOCUMENTATION={{BUILD_DOC}} 
              -DARGOS_BUILD_NATIVE={{BUILD_NATIVE}} 
              -DARGOS_INSTALL_LDSOCONF={{ARGOS_INSTALL_LDSOCONF}} 
              -DARGOS_FORCE_NO_QTOPENGL={{FORCE_NO_QT}}
              "
  dfx_make_build \
    ignore={{ORG_ARGOS}} \
    dir=build_simulator \
    src=../src

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_ARGOS_EXAMPLES}} repo=argos3-examples hash={{HASH_ARGOS_EXAMPLES}}
  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    ignore={{ORG_ARGOS_EXAMPLES}} \
    dir=build \
    src=../src

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_BUZZ}} repo=Buzz hash={{HASH_BUZZ}} dir=buzz
  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    ignore={{ORG_BUZZ}} \
    dir=build \
    src=../src

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_KHEPERAIV}} repo=argos3-kheperaiv hash={{HASH_KHEPERAIV}}
  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    ignore={{ORG_KHEPERAIV}} \
    dir=build_sim \
    src=../src

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_WEBVIZ}} repo=argos3-webviz hash={{HASH_WEBVIZ}}
  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    ignore={{ORG_WEBVIZ}} \
    dir=build \
    src=../src

  cd $PACKAGES

  dfx_git_clone_adv org={{ORG_VICON}} repo=Vicon hash={{HASH_VICON}} vicon
  cmake_args="-DCMAKE_BUILD_TYPE={{BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX={{INSTALL_PREFIX}}"
  dfx_make_build \
    ignore={{ORG_VICON}} \
    dir=build \
    src=..
  
  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  # apt clean

  # add created on info to label
  DT=`date`
  echo CREATED_ON $DT >> "$APPTAINER_LABELS"

  # store the build type into a label
  echo _BUILD_TYPE {{BUILD_TYPE}} >>  "$APPTAINER_LABELS"
  # store whether build native into a label
  echo _BUILD_NATIVE {{BUILD_NATIVE}} >>  "$APPTAINER_LABELS"
  # store whether build doc into a label
  echo _BUILD_DOC {{BUILD_DOC}} >>  "$APPTAINER_LABELS"

  # store the git hashes into labels
  echo _ORG_ARGOS {{ORG_ARGOS}} >> "$APPTAINER_LABELS"
  echo _ORG_ARGOS_EXAMPLES {{ORG_ARGOS_EXAMPLES}} >> "$APPTAINER_LABELS"
  echo _ORG_BUZZ {{ORG_BUZZ}} >> "$APPTAINER_LABELS"
  echo _ORG_KHEPERAIV {{ORG_KHEPERAIV}} >> "$APPTAINER_LABELS"
  echo _ORG_WEBVIZ {{ORG_WEBVIZ}} >> "$APPTAINER_LABELS"
  echo _ORG_VICON {{ORG_VICON}} >> "$APPTAINER_LABELS"
