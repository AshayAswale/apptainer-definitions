Bootstrap: docker
From: ubuntu:20.04

# =====================================
# =====================================
# ====== Manually configurable setup
%post

  # GIT HASHES
  # use "latest" for most recent commit
  ARGOS_HASH="32c42b0"
  ARGOS_EXAMPLES_HASH="261e22e"

  # BUILD TYPE
  # use "Debug" or "Release"
  BUILD_TYPE="Debug"
# =====================================
# =====================================

%labels
  AUTHOR dscatherman@wpi.edu
  VERSION v0.1
  NAME argos_base

%help
  This container installs the base content of ARGoS3 and the related examples.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%environment
  # Do Nothing

%test
  argos3 -q all

%runscript
  argos3 "$@"

# =====================================
# ====== Setup general requirements
%post

  PACKAGES=/user-packages
  # give user rwx permissions over created files/dirs. Change to 002 for r-x.
  umask 000

  mkdir $PACKAGES
  cd $PACKAGES
  
  export DEBIAN_FRONTEND=noninteractive

  apt-get -y update
  apt-get -y install git

# =====================================
# ====== Install ARGoS3
%post

  # pre-reqs
  apt-get install -q -y cmake libfreeimage-dev libfreeimageplus-dev \
    qt5-default freeglut3-dev libxi-dev libxmu-dev liblua5.3-dev \
    lua5.3 doxygen graphviz libgraphviz-dev asciidoc build-essential

  # optional pre-reqs
  apt-get install -q -y libga-dev

  # install argos3
  cd $PACKAGES
  git clone https://github.com/ilpincy/argos3.git argos3
  cd argos3
  
  if [ "$ARGOS_HASH" = "latest" ]; then
    ARGOS_HASH=`git rev-parse --short HEAD`
  else
    git checkout $ARGOS_HASH
  fi

  mkdir build_simulator
  cd build_simulator

  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DARGOS_DOCUMENTATION=ON \
      ../src
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DARGOS_DOCUMENTATION=OFF \
      -DARGOS_INSTALL_LDSOCONF=OFF \
      -DARGOS_BUILD_NATIVE=OFF \
      ../src
  fi

  make -j 16
  make doc
  make install
  ldconfig

# =====================================
# ====== Install ARGoS3-examples
%post

  cd $PACKAGES
  git clone https://github.com/ilpincy/argos3-examples.git
  cd argos3-examples
  
  if [ "$ARGOS_EXAMPLES_HASH" = "latest" ]; then
    ARGOS_EXAMPLES_HASH=`git rev-parse --short HEAD`
  else
    git checkout $ARGOS_EXAMPLES_HASH
  fi

  mkdir build
  cd build
  if [ "$BUILD_TYPE" = "Debug" ]; then
    cmake -DCMAKE_BUILD_TYPE=Debug ..
  elif [ "$BUILD_TYPE" = "Release" ]; then
    cmake -DCMAKE_BUILD_TYPE=Release ..
  fi
  make -j 16

# =====================================
# ====== Cleanup setup
%post
  
  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  apt-get clean

  # add created on info to label
  DT=`date`
  echo "CREATED_ON $DT" >> $SINGULARITY_LABELS

  # store packages directory for future use
  echo "export PACKAGES=$PACKAGES" >> $SINGULARITY_ENVIRONMENT
  # store build type for future use
  echo "export BUILD_TYPE=$BUILD_TYPE" >> $SINGULARITY_ENVIRONMENT

  # store the build type into a label
  echo "_BUILD_TYPE $BUILD_TYPE" >>  "$SINGULARITY_LABELS"
  # store the git hashes into labels
  echo "_HASH_ARGOS $ARGOS_HASH" >> "$SINGULARITY_LABELS"
  echo "_HASH_ARGOS_EXAMPLES $ARGOS_EXAMPLES_HASH" >> "$SINGULARITY_LABELS"
