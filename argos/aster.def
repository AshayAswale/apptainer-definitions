Bootstrap: docker
From: {{ DOCKER_BASE }}

# ===================================
# === Manually configurable setup ===
%arguments

  VERSION=v0.9

  DOCKER_BASE=dcat52/argos-requirements:20.04-minimum

  NUM_BUILD_THREADS=20

  # REPO SOURCE ORGS

  # commonly "ilpincy" or "NESTLab" or "buzz-lang"

  ORG_ARGOS=ilpincy
  ORG_ARGOS_EXAMPLES=NA
  ORG_KHEPERAIV=ilpincy
  ORG_BUZZ=buzz-lang
  ORG_VICON=NA

  # GIT HASHES

  # use "latest" for most recent commit
  HASH_ARGOS=latest
  HASH_ARGOS_EXAMPLES=latest
  HASH_BUZZ=latest
  HASH_KHEPERAIV=latest
  HASH_VICON=latest
  
  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  BUILD_LUA=OFF
  BUILD_NATIVE=OFF
  ARGOS_INSTALL_LDSOCONF=ON

  PACKAGES=/user-packages

  # defaults to "/usr/local/"
  INSTALL_PREFIX=/usr/local/
  #"/user-packages/local/"

#   PATCH_FILE=/home/davis/remove_random_device.patch
#   SSH_KEY_PATH=/home/davis/.ssh/id_ed25519

# ===================================
# ===================================

%labels
  AUTHOR daviscatherman@gmail.com
  VERSION {{ VERSION }}
  NAME ASTER_environment

%help
  This container installs ARGoS3, ARGoS3-Examples, Buzz, and KheperaIV.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%environment
  export PATH={{ INSTALL_PREFIX }}/bin/:$PATH
  export LD_LIBRARY_PATH={{ INSTALL_PREFIX }}/lib/:$LD_LIBRARY_PATH
  export INSTALL_PREFIX={{ INSTALL_PREFIX }}
  export CMAKE_INCLUDE_PATH={{ INSTALL_PREFIX }}
  export BUILD_TYPE={{ BUILD_TYPE }}
  export PACKAGES={{ PACKAGES }}

# %test
#   argos3 -q all

# %setup
#   echo $PWD
#   tar -C /home/davis/Research/repositories/ -czf repositories.tar.gz .
#   mkdir -p ${APPTAINER_ROOTFS}/{{ PACKAGES }}

# %files
#   repositories.tar.gz {{ PACKAGES }}/

# %files
#   {{ SSH_KEY_PATH }} /sshkey
#   {{ PATCH_FILE }} /caf-cpp.patch

%runscript
  cmd=argos3
  arg="$@"
  $cmd $arg

%post -c /bin/bash
  abc() {
    echo "$1 $2"
  }

  # ARG: HASH of commit to checkout (or latest)
  # ARG: ORG of repository
  # ARG: REPO repository to clone
  # ARG: DIR desired path name for cloned repository (if any)
  # IMPACTS: new folder
  # IMPACTS: PWD
  dfx_clone_and_checkout() {
    echo $1 $2 $3 $4
    HASH=$1
    ORG=$2
    REPO=$3
    DIR=$4

    if [ "$ORG" = "NA" ]; then
      return
    fi

    if test -z "$DIR" ; then
      DIR=$REPO
    fi

    if [ "$ORG" = "local" ]; then
      cd $DIR
      return
    fi

    git clone https://github.com/$ORG/$REPO.git $DIR
    cd $DIR
    
    if [ "$HASH" = "latest" ]; then
      HASH=`git rev-parse --short HEAD`
    else
      git checkout $HASH
    fi
  }

  # ARG: path for directory to be made
  # IMPACTS: PWD
  dfx_make_dir_and_cd() {
    mkdir $1
    cd $1
  }

  # ARG: string to search within
  # ARG: string to find
  # RETURN: 1 if in string
  dfx_string_contains() {
    echo $1
    echo $2
    if printf '%s\n' "$1" | grep -Fqe "$2"; then
      return 1
    fi
    return 
  }
  
  # give user permissions over created files/dirs (possibly of interest 002)
  umask 000

  PACKAGES={{ PACKAGES }}

  mkdir -p $PACKAGES
  cd $PACKAGES
  
  export DEBIAN_FRONTEND=noninteractive

  export SSH_AUTH_SOCK={{ SSH_AUTH_SOCK }}

  apt -qy update
  apt -qy install git bc gdb tree
  export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=accept-new"

  apt install -qy cmake-curses-gui

  if ! dfx_string_contains {{ DOCKER_BASE }} dcat52; then
    # pre-reqs only need installed if not preinstalled n the container
    apt install -qy cmake libfreeimage-dev libfreeimageplus-dev \
      freeglut3-dev libxi-dev libxmu-dev build-essential
  fi

  # this pre-req will require python
  apt install -qy qt5-default python3-pip

  if [ "{{ BUILD_LUA }}" = "ON" ]; then
    apt install -qy liblua5.3-dev lua5.3
  fi

  if [ "{{ BUILD_DOC }}" = "ON" ]; then
    apt install -qy doxygen asciidoc graphviz libgraphviz-dev
  fi

  cd $PACKAGES
  
  dfx_clone_and_checkout {{ HASH_ARGOS }} {{ ORG_ARGOS }} argos3

  mkdir build_simulator
  cd build_simulator

  if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
    cmake \
      -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
      -DCMAKE_BUILD_TYPE=Debug \
      -DARGOS_DOCUMENTATION={{ BUILD_DOC }} \
      -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
      ../src
  elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DARGOS_DOCUMENTATION={{ BUILD_DOC }} \
      -DARGOS_INSTALL_LDSOCONF={{ ARGOS_INSTALL_LDSOCONF }} \
      -DARGOS_BUILD_NATIVE={{ BUILD_NATIVE }} \
      -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
      ../src
  fi

  make -j {{ NUM_BUILD_THREADS }}
  if [ "{{ BUILD_DOC }}" = "ON" ]; then
    make doc
  fi
  make install
  ldconfig

  cd $PACKAGES

  dfx_clone_and_checkout {{ HASH_ARGOS_EXAMPLES }} {{ ORG_ARGOS_EXAMPLES }} argos3-examples
  
  if [ ! "{{ ORG_ARGOS_EXAMPLES }}" = "NA" ]; then
    mkdir build
    cd build
    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
        cmake \
          -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
          ..
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
        cmake \
          -DCMAKE_BUILD_TYPE=Release  \
          -DARGOS_FORCE_NO_QTOPENGL=ON \
          -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
          ..
    fi
    make -j {{ NUM_BUILD_THREADS }}
  fi

  cd $PACKAGES
  dfx_clone_and_checkout {{ HASH_BUZZ }} {{ ORG_BUZZ }} Buzz buzz
  
  if [ ! "{{ ORG_BUZZ }}" = "NA" ]; then
    mkdir build
    cd build
  
    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
      cmake \
        -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Release  \
        -DARGOS_FORCE_NO_QTOPENGL=ON \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    fi
  
    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

  cd $PACKAGES

  dfx_clone_and_checkout {{ HASH_KHEPERAIV }} {{ ORG_KHEPERAIV }} argos3-kheperaiv
  
  if [ ! "{{ ORG_KHEPERAIV }}" = "NA" ]; then
    mkdir build_sim
    cd build_sim

    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
      cmake \
        -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Release  \
        -DARGOS_FORCE_NO_QTOPENGL=ON \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    fi

    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

  cd $PACKAGES

  dfx_clone_and_checkout {{ HASH_VICON }} {{ ORG_VICON }} Vicon vicon
  
  if [ ! "{{ ORG_VICON }}" = "NA" ]; then
    mkdir build
    cd build
    cmake ..
  
    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

  cd $PACKAGES
  dfx_clone_and_checkout latest ilpincy argos3-leo
  mkdir build_sim
  cd build_sim
  cmake \
    -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
    ../src
  make -j {{ NUM_BUILD_THREADS }}
  make install
  ldconfig

  cd $PACKAGES
  git clone ssh://git@git.collab.cra.com:7999/aster/caf-cpp.git
  cd caf-cpp
#   git apply /caf-cpp.patch
#   git fetch origin pull/7/head:main
  mkdir build
  cd build
  cmake \
    -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer -fsanitize=address " \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
    ..
  make -j {{ NUM_BUILD_THREADS }}
  make install
  ldconfig

  # To build aster-integration
  # mdkir build
  # cd build
  # cmake \
  #     -DCMAKE_CXX_FLAGS="-DDEBUG -fno-omit-frame-pointer -fsanitize=address " \
  #     -DCMAKE_BUILD_TYPE=Debug \
  #     -DCMAKE_INSTALL_PREFIX=/usr/local/ \
  #     ../src
  # make -j 8
  # cd ..
  # argos3 -c src/experiments/<config>.argos
  
  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  # apt clean

  # Do not forget to clear the ssh keys you added
  export SSH_AUTH_SOCK=""

  # add created on info to label
  DT=`date`
  echo CREATED_ON $DT >> "$APPTAINER_LABELS"

  # store the build type into a label
  echo _BUILD_TYPE {{ BUILD_TYPE }} >>  "$APPTAINER_LABELS"
  # store whether build native into a label
  echo _BUILD_NATIVE {{ BUILD_NATIVE }} >>  "$APPTAINER_LABELS"
  # store whether build doc into a label
  echo _BUILD_DOC {{ BUILD_DOC }} >>  "$APPTAINER_LABELS"

  # store the git hashes into labels
  echo _ORG_ARGOS {{ ORG_ARGOS }} >> "$APPTAINER_LABELS"
  echo _ORG_ARGOS_EXAMPLES {{ ORG_ARGOS_EXAMPLES }} >> "$APPTAINER_LABELS"
  echo _ORG_BUZZ {{ ORG_BUZZ }} >> "$APPTAINER_LABELS"
  echo _ORG_KHEPERAIV {{ ORG_KHEPERAIV }} >> "$APPTAINER_LABELS"
  
  echo _HASH_ARGOS {{ HASH_ARGOS }} >> "$APPTAINER_LABELS"
  echo _HASH_ARGOS_EXAMPLES {{ HASH_ARGOS_EXAMPLES }} >> "$APPTAINER_LABELS"
  echo _HASH_BUZZ {{ HASH_BUZZ }} >> "$APPTAINER_LABELS"
  echo _HASH_KHEPERAIV {{ HASH_KHEPERAIV }} >> "$APPTAINER_LABELS"
