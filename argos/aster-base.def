Bootstrap: docker
From: {{DOCKER_BASE}} 

# ===================================
# === Manually configurable setup ===
%arguments

  VERSION=v0.12

  DOCKER_BASE=ubuntu:20.04

  NUM_BUILD_THREADS=20

  # GIT HASHES
  # use "latest" for most recent commit
  HASH_JSON=v3.11.3
  HASH_EIGEN=3.4
  
  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  BUILD_LUA=OFF

  # defaults to "/usr/local/"
  INSTALL_PREFIX=/usr/local/
  #"/packages/local/"

# ===================================
# ===================================

%labels
  AUTHOR daviscatherman@gmail.com
  VERSION {{ VERSION }}
  NAME ASTER_environment

%setup
  . definitions/include/helper.sh
  add_bashrc
  add_helper

%post -c /bin/bash
  . /.singularity.d/env/90-bashrc.sh
  . /.singularity.d/env/90-helper.sh

  export LD_LIBRARY_PATH={{INSTALL_PREFIX}}/lib/:$LD_LIBRARY_PATH
  export DEBIAN_FRONTEND=noninteractive
  
  # umask 000

  PREBUILT=/packages
  mkdir -p $PREBUILT
  cd $PREBUILT

  apt update -y
  apt install -qy git bc gdb tree
  apt install -qy vim

  if dfx_string_not_contains {{DOCKER_BASE}} dcat52; then
    # pre-reqs only need installed if not preinstalled n the container
    apt install -qy cmake libfreeimage-dev libfreeimageplus-dev \
      freeglut3-dev libxi-dev libxmu-dev build-essential
  fi

  # this pre-req will require python
  apt install -qy qt5-default python3-pip

  apt install -qy zlib1g-dev libssl-dev

  if [ "{{ BUILD_LUA }}" = "ON" ]; then
    apt install -qy liblua5.3-dev lua5.3
  fi

  if [ "{{ BUILD_DOC }}" = "ON" ]; then
    apt install -qy doxygen asciidoc graphviz libgraphviz-dev
  fi

  apt install -qy curl lsb-release lsb-core
  echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list
  curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
  apt -qy update
  apt install -qy ros-noetic-ros-comm ros-noetic-geometry-msgs ros-noetic-nav-msgs

  . /opt/ros/noetic/setup.sh

  declare -A repos=(
    ["json"]="https://github.com/nlohmann/json.git"
    ["eigen"]="https://gitlab.com/libeigen/eigen.git"
  )

  cd $PREBUILT

  for dir in "${!repos[@]}"; do
    if [ ! -d "$dir" ]; then
      echo "Cloning ${repos[$dir]} into $dir"
      git clone "${repos[$dir]}" "$dir"
    else
      echo "Directory $dir already exists. Skipping cloning."
    fi
  done

  cd $PREBUILT
  check_directories=("json" "eigen")

  cd $PREBUILT
  # <clone json repository>
  cd json
  dfx_checkout_hash {{HASH_JSON}}
  [ -d "build" ] && rm -rf build
  mkdir build
  cd build
  cmake -DJSON_BuildTests=OFF ..
  make
  make install
  ldconfig
  
  cd $PREBUILT
  # <clone eigen repository>
  cd eigen
  dfx_checkout_hash {{HASH_EIGEN}}
  [ -d "build" ] && rm -rf build
  mkdir build
  cd build
  cmake ..
  make
  make install
  ldconfig

  cd $PREBUILT
