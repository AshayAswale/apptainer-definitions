Bootstrap: docker
From: ubuntu:20.04

# ===================================
# === Manually configurable setup ===
%arguments

  NUM_BUILD_THREADS=20

  # REPO SOURCE ORGS

  # use "ilpincy" or other
  ORG_ARGOS=ilpincy
  ORG_ARGOS_EXAMPLES=NA
  ORG_KHEPERAIV=ilpincy
  # use "NESTLab" or "buzz-lang" or other
  ORG_BUZZ=NESTLab
  ORG_VICON=NA

  # GIT HASHES

  # use "latest" for most recent commit
  HASH_ARGOS=latest
  HASH_ARGOS_EXAMPLES=latest
  HASH_BUZZ=latest
  HASH_KHEPERAIV=latest
  HASH_VICON=latest

  # BUILD TYPE
  
  # use "Debug" or "Release"
  BUILD_TYPE=Debug

  # use "OFF" or "ON"
  BUILD_DOC=OFF
  ARGOS_INSTALL_LDSOCONF=ON

  # use "OFF" or "ON" when BUILD_TYPE is set to "Release"
  BUILD_NATIVE=ON

  # defaults to "/usr/local"
  INSTALL_PREFIX=/user-packages/local/
  #"/user-packages/local"

# ===================================
# ===================================

%labels
  AUTHOR dscatherman@wpi.edu
  VERSION v0.9
  NAME argos_full

%help
  This container installs ARGoS3, ARGoS3-Examples, Buzz, and KheperaIV.
  You can launch this container as a shell, or directly run ARGoS programs by replacing the executable of argos3 with the container.

  View the Labels to see the configuration used of the built container.

%environment
  export PATH={{ INSTALL_PREFIX }}/bin/:$PATH
  export LD_LIBRARY_PATH={{ INSTALL_PREFIX }}/lib/:$LD_LIBRARY_PATH
  export INSTALL_PREFIX={{ INSTALL_PREFIX }}
  export CMAKE_INCLUDE_PATH={{ INSTALL_PREFIX }}
  export BUILD_TYPE={{ BUILD_TYPE }}

%test
  argos3 -q all

%runscript
  cmd=$(basename "$0")
  arg="$@"
  $cmd $arg

# === Setup general requirements ===
%post

  clone_and_checkout() {
    HASH=$1
    ORG=$2
    REPO=$3
    DIR=$4

    if [ "$ORG" = "NA" ]; then
      return
    fi

    if test -z "$DIR" 
    then
      DIR=$REPO
    fi
    git clone https://github.com/$ORG/$REPO.git $DIR
    cd $DIR
    
    if [ "$HASH" = "latest" ]; then
      HASH=`git rev-parse --short HEAD`
    else
      git checkout $HASH
    fi
  }

  PACKAGES=/user-packages
  # give user rwx permissions over created files/dirs. Change to 002 for r-x.
  umask 000

  mkdir $PACKAGES
  cd $PACKAGES
  
  export DEBIAN_FRONTEND=noninteractive

  apt-get -y update
  apt-get -y install git bc gdb

# === Install ARGoS3 ===
%post

  # pre-reqs
  apt-get install -q -y cmake libfreeimage-dev libfreeimageplus-dev \
    qt5-default freeglut3-dev libxi-dev libxmu-dev liblua5.3-dev \
    lua5.3 doxygen graphviz libgraphviz-dev asciidoc build-essential

  # optional pre-reqs
  apt-get install -q -y libga-dev

  # install argos3
  cd $PACKAGES
  
  clone_and_checkout {{ HASH_ARGOS }} {{ ORG_ARGOS }} argos3

  mkdir build_simulator
  cd build_simulator

  if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Debug \
      -DARGOS_DOCUMENTATION={{ BUILD_DOC }} \
      -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
      ../src
  elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DARGOS_FORCE_NO_QTOPENGL=ON \
      -DARGOS_DOCUMENTATION={{ BUILD_DOC }} \
      -DARGOS_INSTALL_LDSOCONF={{ ARGOS_INSTALL_LDSOCONF }} \
      -DARGOS_BUILD_NATIVE={{ BUILD_NATIVE }} \
      -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
      ../src
  fi

  make -j {{ NUM_BUILD_THREADS }}
  if [ "{{ BUILD_DOC }}" = "ON" ]; then
    make doc
  fi
  make install
  ldconfig

# === Install ARGoS3-examples ===
%post

  cd $PACKAGES

  clone_and_checkout {{ HASH_ARGOS_EXAMPLES }} {{ ORG_ARGOS_EXAMPLES }} argos3-examples
  
  if [ ! "{{ ORG_ARGOS_EXAMPLES }}" = "NA" ]; then
    mkdir build
    cd build
    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
        cmake \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
          ..
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
        cmake \
          -DCMAKE_BUILD_TYPE=Release  \
          -DARGOS_FORCE_NO_QTOPENGL=ON \
          -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
          ..
    fi
    make -j {{ NUM_BUILD_THREADS }}
  fi

# # === Install Buzz ===
# %post

  cd $PACKAGES
  clone_and_checkout {{ HASH_BUZZ }} {{ ORG_BUZZ }} Buzz buzz
  
  if [ ! "{{ ORG_BUZZ }}" = "NA" ]; then
    mkdir build
    cd build
  
    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Release  \
        -DARGOS_FORCE_NO_QTOPENGL=ON \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    fi
  
    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

# === Install argos3-kheperaiv ===
%post

  cd $PACKAGES

  clone_and_checkout {{ HASH_KHEPERAIV }} {{ ORG_KHEPERAIV }} argos3-kheperaiv
  
  if [ ! "{{ ORG_KHEPERAIV }}" = "NA" ]; then
    mkdir build_sim
    cd build_sim

    if [ "{{ BUILD_TYPE }}" = "Debug" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    elif [ "{{ BUILD_TYPE }}" = "Release" ]; then
      cmake \
        -DCMAKE_BUILD_TYPE=Release  \
        -DARGOS_FORCE_NO_QTOPENGL=ON \
        -DCMAKE_INSTALL_PREFIX={{ INSTALL_PREFIX }} \
        ../src
    fi

    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

# # === Install vicon ===
# %post

  cd $PACKAGES

  clone_and_checkout {{ HASH_VICON }} {{ ORG_VICON }} Vicon vicon
  
  if [ ! "{{ ORG_VICON }}" = "NA" ]; then
    mkdir build
    cd build
    cmake ..
  
    make -j {{ NUM_BUILD_THREADS }}
    make install
    ldconfig
  fi

# === Cleanup setup ===
%post
  
  # remove a section of libQt5 to work on Turing
  strip --remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  # empty the cache to reduce image size
  # apt-get clean

  # add created on info to label
  DT=`date`
  echo CREATED_ON $DT >> "$APPTAINER_LABELS"

  # store the build type into a label
  echo _BUILD_TYPE {{ BUILD_TYPE }} >>  "$APPTAINER_LABELS"
  # store whether build native into a label
  echo _BUILD_NATIVE {{ BUILD_NATIVE }} >>  "$APPTAINER_LABELS"
  # store whether build doc into a label
  echo _BUILD_DOC {{ BUILD_DOC }} >>  "$APPTAINER_LABELS"

  # store the git hashes into labels
  echo _ORG_ARGOS {{ ORG_ARGOS }} >> "$APPTAINER_LABELS"
  echo _ORG_ARGOS_EXAMPLES {{ ORG_ARGOS_EXAMPLES }} >> "$APPTAINER_LABELS"
  echo _ORG_BUZZ {{ ORG_BUZZ }} >> "$APPTAINER_LABELS"
  echo _ORG_KHEPERAIV {{ ORG_KHEPERAIV }} >> "$APPTAINER_LABELS"
  
  echo _HASH_ARGOS {{ HASH_ARGOS }} >> "$APPTAINER_LABELS"
  echo _HASH_ARGOS_EXAMPLES {{ HASH_ARGOS_EXAMPLES }} >> "$APPTAINER_LABELS"
  echo _HASH_BUZZ {{ HASH_BUZZ }} >> "$APPTAINER_LABELS"
  echo _HASH_KHEPERAIV {{ HASH_KHEPERAIV }} >> "$APPTAINER_LABELS"
